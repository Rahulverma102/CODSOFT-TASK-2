import re

def analyze_password_strength(password):
    # Check length
    length = len(password)
    if length < 8:
        length_score = 0
    elif length < 12:
        length_score = 1
    else:
        length_score = 2
    
    # Check complexity (using regex for simplicity)
    has_lowercase = bool(re.search(r'[a-z]', password))
    has_uppercase = bool(re.search(r'[A-Z]', password))
    has_digit = bool(re.search(r'\d', password))
    has_special = bool(re.search(r'[@$!%*?&]', password))
    
    complexity_score = sum([has_lowercase, has_uppercase, has_digit, has_special])
    
    # Check uniqueness (count unique characters)
    unique_chars = len(set(password))
    if unique_chars < length * 0.5:
        uniqueness_score = 0
    elif unique_chars < length * 0.7:
        uniqueness_score = 1
    else:
        uniqueness_score = 2
    
    # Calculate overall strength score
    strength_score = length_score + complexity_score + uniqueness_score
    
    # Determine strength level based on score
    if strength_score <= 2:
        strength_level = "Weak"
    elif strength_score <= 4:
        strength_level = "Moderate"
    else:
        strength_level = "Strong"
    
    return {
        "length": length,
        "complexity_score": complexity_score,
        "unique_chars": unique_chars,
        "strength_score": strength_score,
        "strength_level": strength_level
    }

# Example usage:
if __name__ == "__main__":
    password = input("Enter a password to analyze: ")
    result = analyze_password_strength(password)
    print(f"Password: {password}")
    print(f"Length: {result['length']}")
    print(f"Complexity Score: {result['complexity_score']}")
    print(f"Unique Characters: {result['unique_chars']}")
    print(f"Strength Score: {result['strength_score']}")
    print(f"Strength Level: {result['strength_level']}")
